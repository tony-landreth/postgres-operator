# This list of queries configures an OTel SQL Query Receiver to read pgMonitor
# metrics from Postgres.
#
# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/-/receiver/sqlqueryreceiver#metrics-queries
# https://github.com/CrunchyData/pgmonitor/blob/development/sql_exporter/common/crunchy_global_collector.yml
#
#
  # NOTES: sqlqueryreceiver doesn't know psql client commands
  # TODO:  I can stash a 
  # NOTES: sqlqueryreceiver doesn't know PG comments
  - sql: |
      DROP TABLE IF EXISTS pgbackrest_info;
      DROP TABLE IF EXISTS pgbackrest_lines;
      CREATE TEMPORARY TABLE pgbackrest_lines (data text);
      CREATE TEMPORARY TABLE pgbackrest_info (data json);
      COPY pgbackrest_lines (data)
      FROM PROGRAM 'grep --extended-regexp --no-filename --no-messages --only-matching ''^\[[^]:]+\]'' /etc/pgbackrest/*.conf /etc/pgbackrest/conf.d/*.conf ||:'
      WITH (FORMAT csv, HEADER false, DELIMITER ':', QUOTE '"');

      --- Have the operator write these COPYs.
      COPY pgbackrest_info (data)
      FROM PROGRAM 'export LC_ALL=C && printf "\f" && pgbackrest info --log-level-console=info --log-level-stderr=warn --output=json --stanza=db && printf "\f"'
      WITH (FORMAT csv, HEADER false, QUOTE E'\f');

      WITH
      all_backups (data) AS (
        SELECT jsonb_array_elements(to_jsonb(data)) FROM pgbackrest_info
      ),
      stanza_backups (stanza, backup) AS (
        SELECT data->>'name', jsonb_array_elements(data->'backup') FROM all_backups
      ),
      ordered_backups (stanza, backup, seq_oldest, seq_newest) AS (
        SELECT stanza, backup,
          ROW_NUMBER() OVER (
            PARTITION BY stanza, backup->'database'->>'repo-key', backup->>'type'
            ORDER BY backup->'timestamp'->>'start' ASC, backup->'timestamp'->>'stop' ASC
          ),
          ROW_NUMBER() OVER (
            PARTITION BY stanza, backup->'database'->>'repo-key', backup->>'type'
            ORDER BY backup->'timestamp'->>'start' DESC, backup->'timestamp'->>'stop' DESC
          )
        FROM stanza_backups
      ),

      ccp_backrest_last_full_backup AS (
        SELECT
          stanza,
          backup->'database'->>'repo-key' AS repo,
          EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint - max((backup->'timestamp'->>'stop')::bigint) AS time_since_completion_seconds
        FROM ordered_backups
        WHERE seq_newest = 1 AND backup->>'type' IN ('full')
        GROUP BY 1,2
      )
      SELECT
        ccp_backrest_last_full_backup.time_since_completion_seconds as last_full_backup
      FROM ccp_backrest_last_full_backup;

    metrics:
      # - metric_name: ccp_backrest_last_diff_backup_time_since_completion_seconds
      #   value_column: tount
      - metric_name: ccp_backrest_last_full_backup_time_since_completion_seconds
        value_column: last_full_backup

